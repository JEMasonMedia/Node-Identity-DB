<ref *1> SQLBuilder {
  isArray: [Function: isArray],
  isString: [Function: isString],
  isNumber: [Function: isNumber],
  isBoolean: [Function: isBoolean],
  isPlainObject: [Function: isPlainObject],
  isFunction: [Function: isFunction],
  forEach: [Function: forEach],
  _reservedWords: {
    AES128: true,
    AES256: true,
    ALL: true,
    ALLOWOVERWRITE: true,
    ANALYSE: true,
    ANALYZE: true,
    AND: true,
    ANY: true,
    ARRAY: true,
    AS: true,
    ASC: true,
    AUTHORIZATION: true,
    BACKUP: true,
    BETWEEN: true,
    BINARY: true,
    BLANKSASNULL: true,
    BOTH: true,
    BYTEDICT: true,
    CASE: true,
    CAST: true,
    CHECK: true,
    COLLATE: true,
    COLUMN: true,
    CONSTRAINT: true,
    CREATE: true,
    CREDENTIALS: true,
    CROSS: true,
    CURRENT_DATE: true,
    CURRENT_TIME: true,
    CURRENT_TIMESTAMP: true,
    CURRENT_USER: true,
    CURRENT_USER_ID: true,
    DEFAULT: true,
    DEFERRABLE: true,
    DEFLATE: true,
    DEFRAG: true,
    DELTA: true,
    DELTA32K: true,
    DESC: true,
    DISABLE: true,
    DISTINCT: true,
    DO: true,
    ELSE: true,
    EMPTYASNULL: true,
    ENABLE: true,
    ENCODE: true,
    ENCRYPT: true,
    ENCRYPTION: true,
    END: true,
    EXCEPT: true,
    EXPLICIT: true,
    FALSE: true,
    FOR: true,
    FOREIGN: true,
    FREEZE: true,
    FROM: true,
    FULL: true,
    GLOBALDICT256: true,
    GLOBALDICT64K: true,
    GRANT: true,
    GROUP: true,
    GZIP: true,
    HAVING: true,
    IDENTITY: true,
    IGNORE: true,
    ILIKE: true,
    IN: true,
    INITIALLY: true,
    INNER: true,
    INTERSECT: true,
    INTO: true,
    IS: true,
    ISNULL: true,
    JOIN: true,
    LEADING: true,
    LEFT: true,
    LIKE: true,
    LIMIT: true,
    LOCALTIME: true,
    LOCALTIMESTAMP: true,
    LUN: true,
    LUNS: true,
    LZO: true,
    LZOP: true,
    MINUS: true,
    MOSTLY13: true,
    MOSTLY32: true,
    MOSTLY8: true,
    NATURAL: true,
    NEW: true,
    NOT: true,
    NOTNULL: true,
    NULL: true,
    NULLS: true,
    OFF: true,
    OFFLINE: true,
    OFFSET: true,
    OLD: true,
    ON: true,
    ONLY: true,
    OPEN: true,
    OR: true,
    ORDER: true,
    OUTER: true,
    OVERLAPS: true,
    PARALLEL: true,
    PARTITION: true,
    PERCENT: true,
    PLACING: true,
    PRIMARY: true,
    RAW: true,
    READRATIO: true,
    RECOVER: true,
    REFERENCES: true,
    REJECTLOG: true,
    RESORT: true,
    RESTORE: true,
    RIGHT: true,
    SELECT: true,
    SESSION_USER: true,
    SIMILAR: true,
    SOME: true,
    SYSDATE: true,
    SYSTEM: true,
    TABLE: true,
    TAG: true,
    TDES: true,
    TEXT255: true,
    TEXT32K: true,
    THEN: true,
    TO: true,
    TOP: true,
    TRAILING: true,
    TRUE: true,
    TRUNCATECOLUMNS: true,
    UNION: true,
    UNIQUE: true,
    USER: true,
    USING: true,
    VERBOSE: true,
    WALLET: true,
    WHEN: true,
    WHERE: true,
    WITH: true,
    WITHOUT: true
  },
  _options: { test: false, createDocs: false },
  _currentLanguage: 'MySQL',
  _quoteChar: '',
  _operators: {
    '$aggregationHelper': aggregationHelper {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$aggregationHelper',
      __allowedTypes__: [Object],
      '$expr': [Expression],
      '$distinct': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\aggregation'
    },
    '$avg': avg {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$avg',
      __allowedTypes__: [Object],
      '$expr': [Expression],
      '$distinct': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\aggregation\\avg'
    },
    '$count': count {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$count',
      __allowedTypes__: [Object],
      '$expr': [Expression],
      '$distinct': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\aggregation\\count'
    },
    '$max': max {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$max',
      __allowedTypes__: [Object],
      '$expr': [Expression],
      '$distinct': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\aggregation\\max'
    },
    '$min': min {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$min',
      __allowedTypes__: [Object],
      '$expr': [Expression],
      '$distinct': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\aggregation\\min'
    },
    '$sum': sum {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$sum',
      __allowedTypes__: [Object],
      '$expr': [Expression],
      '$distinct': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\aggregation\\sum'
    },
    '$add': add {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: 'add',
      __allowedTypes__: [Object],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\arithmetic\\add'
    },
    '$mul': mul {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: 'mul',
      __allowedTypes__: [Object],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\arithmetic\\mul'
    },
    '$between': between {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$between',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$min': [Expression],
      '$max': [Expression],
      sqlPath: '.\\helpers\\comparision\\between'
    },
    '$contains': contains {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$contains',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\contains'
    },
    '$endsWith': endsWith {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$endsWith',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\endsWith'
    },
    '$eq': eq {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$eq',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\eq'
    },
    '$gt': gt {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$gt',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\gt'
    },
    '$gte': gte {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$gte',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\gte'
    },
    '$in': $in {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$in',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\in'
    },
    '$like': like {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$like',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\like'
    },
    '$lt': lt {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$lt',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\lt'
    },
    '$lte': lte {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$lte',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\lte'
    },
    '$ne': ne {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$ne',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\ne'
    },
    '$nin': nin {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$nin',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\nin'
    },
    '$startsWith': startsWith {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$startsWith',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\comparision\\startsWith'
    },
    '$column': column {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$column',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$notNull': [AcceptIfTrue],
      '$autoInc': [AcceptIfTrue],
      '$comment': [StringValueParam],
      '$type': [type],
      '$size': [size],
      '$default': [$default],
      sqlPath: '.\\helpers\\ddl\\column'
    },
    '$columns': columns {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$columns',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\ddl\\columns'
    },
    '$check': check {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$check',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\ddl\\constraint\\check'
    },
    '$constraint': constraint {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$constraint',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\ddl\\constraint'
    },
    '$foreignKey': foreignKey {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$foreignKey',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\ddl\\constraint\\foreignKey'
    },
    '$primary': primary {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$primary',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\ddl\\constraint\\primary'
    },
    '$references': references {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$references',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$table': [StringIdentifier],
      '$onDelete': [onUpdate],
      '$onUpdate': [onDelete],
      '$match': [match],
      sqlPath: '.\\helpers\\ddl\\constraint\\references'
    },
    '$unique': unique {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$unique',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\ddl\\constraint\\unique'
    },
    '$cmp': cmp {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$cmp',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$comparator': [comparator],
      '$value': [valueHelper],
      '$other': [valueHelper],
      sqlPath: '.\\helpers\\functions\\comparision\\cmp'
    },
    '$coalesce': coalesce {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$coalesce',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\comparision\\coalesce'
    },
    '$now': now {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$now',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\datetime\\now'
    },
    '$toTimestamp': toTimestamp {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$toTimestamp',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$expr': [StringValueParam],
      '$format': [StringValueParam],
      sqlPath: '.\\helpers\\functions\\datetime\\to_timestamp'
    },
    '$json': json {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$json',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json'
    },
    '$jsonAgg': jsonAgg {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$jsonAgg',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\jsonAgg'
    },
    '$jsonbAgg': jsonbAgg {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$jsonbAgg',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\jsonbAgg'
    },
    '$jsonbBuildObject': jsonbBuildObject {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$jsonbBuildObject',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\jsonbBuildObject'
    },
    '$jsonbEach': jsonbEach {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$jsonbEach',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\jsonbEach'
    },
    '$jsonbObjectAgg': jsonbObjectAgg {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$jsonbObjectAgg',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\jsonbObjectAgg'
    },
    '$jsonbSet': jsonbSet {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$jsonbSet',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$path': [StringValueParam],
      '$target': [target],
      '$value': [value],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\jsonbSet'
    },
    '$jsonBuildObject': jsonBuildObject {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$jsonBuildObject',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\jsonBuildObject'
    },
    '$jsonEach': jsonEach {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$jsonEach',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\jsonEach'
    },
    '$jsonObjectAgg': jsonObjectAgg {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$jsonObjectAgg',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\jsonObjectAgg'
    },
    '$rowToJson': rowToJson {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$rowToJson',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\json\\PostgreSQL\\rowToJson'
    },
    '$isNull': isNull {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$isNull',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\misc\\isnull'
    },
    '$concat': concat {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$concat',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\string\\concat'
    },
    '$left': left {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$left',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$str': [StringValueParam],
      '$len': [NumberValueParam],
      sqlPath: '.\\helpers\\functions\\string\\left'
    },
    '$currentDatabase': currentDatabase {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$currentDatabase',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\systeminformations\\current_database'
    },
    '$currentSchema': currentSchema {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$currentSchema',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\systeminformations\\current_schema'
    },
    '$currentUser': currentUser {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$currentUser',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\functions\\systeminformations\\current_user'
    },
    '$and': and {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$and',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\logical\\and'
    },
    '$not': not {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$not',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\logical\\not'
    },
    '$or': or {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$or',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\logical\\or'
    },
    '$': $ {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\misc\\$'
    },
    '$anyExpr': anyExpr {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$anyExpr',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\misc\\anyExpr'
    },
    '$i': i {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$i',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\misc\\i'
    },
    __: __ {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$__',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\misc\\__'
    },
    '$excluded': excluded {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$excluded',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\queries\\excluded'
    },
    '$from': from {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$from',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\queries\\from'
    },
    '$crossJoin': crossJoin {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$crossJoin',
      __allowedTypes__: [Object],
      '$on': [on],
      '$table': [StringIdentifier],
      '$lateral': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\queries\\join\\crossJoin'
    },
    '$fullOuterJoin': fullOuterJoin {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$fullOuterJoin',
      __allowedTypes__: [Object],
      '$on': [on],
      '$table': [StringIdentifier],
      '$lateral': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\queries\\join\\fullOuterJoin'
    },
    '$innerJoin': innerJoin {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$innerJoin',
      __allowedTypes__: [Object],
      '$on': [on],
      '$table': [StringIdentifier],
      '$lateral': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\queries\\join\\innerJoin'
    },
    '$join': join {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$join',
      __allowedTypes__: [Object],
      '$lateral': [lateral],
      '$cross': [cross],
      '$inner': [inner],
      '$left': [left],
      '$right': [right],
      '$full': [full],
      '$on': [on],
      sqlPath: '.\\helpers\\queries\\join'
    },
    '$leftJoin': leftJoin {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$leftJoin',
      __allowedTypes__: [Object],
      '$on': [on],
      '$table': [StringIdentifier],
      '$lateral': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\queries\\join\\leftJoin'
    },
    '$rightJoin': rightJoin {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$rightJoin',
      __allowedTypes__: [Object],
      '$on': [on],
      '$table': [StringIdentifier],
      '$lateral': [AcceptIfTrue],
      callee: [Function (anonymous)],
      sqlPath: '.\\helpers\\queries\\join\\rightJoin'
    },
    '$limit': limit {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$limit',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\queries\\limit'
    },
    '$offset': offset {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$offset',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\queries\\offset'
    },
    '$orderBy': orderBy {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$orderBy',
      __allowedTypes__: [Object],
      '$asc': [asc],
      '$desc': [desc],
      '$nullsFirst': [nullsFirst],
      '$nullsLast': [nullsLast],
      sqlPath: '.\\helpers\\queries\\orderBy'
    },
    '$returning': returning {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$returning',
      __allowedTypes__: [Object],
      '$columns': [columns],
      '$into': [into],
      sqlPath: '.\\helpers\\queries\\returning'
    },
    '$tableFunction': tableFunction {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$tableFunction',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$name': [StringIdentifier],
      '$args': [ArrayValueParam],
      sqlPath: '.\\helpers\\queries\\tableFunction'
    },
    '$top': top {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$top',
      __allowedTypes__: [Object],
      '$value': [Expression],
      '$percent': [AcceptIfTrue],
      sqlPath: '.\\helpers\\queries\\top'
    },
    '$using': using {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$using',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\queries\\using'
    },
    '$where': where {
      __is__: 'helper',
      __builderInstance__: [Circular *1],
      __name__: '$where',
      __allowedTypes__: [Object],
      sqlPath: '.\\helpers\\queries\\where'
    },
    '$createIndex': createIndex {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$createIndex',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$unique': [AcceptIfTrue],
      '$concurrently': [AcceptIfTrue],
      '$ine': [AcceptIfTrue],
      '$ifNotExists': [AcceptIfTrue],
      '$name': [StringIdentifier],
      '$table': [StringIdentifier],
      '$tablespace': [StringIdentifier],
      '$using': [using],
      '$columns': [columns],
      '$storageParameters': [storageParameters],
      sqlPath: '.\\operators\\createIndex'
    },
    '$createTable': createTable {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$createTable',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$orReplace': [AcceptIfTrue],
      '$temp': [AcceptIfTrue],
      '$unlogged': [AcceptIfTrue],
      '$ine': [AcceptIfTrue],
      '$ifNotExists': [AcceptIfTrue],
      '$table': [StringIdentifier],
      '$tablespace': [StringIdentifier],
      '$define': [define],
      '$options': [options],
      sqlPath: '.\\operators\\createTable'
    },
    '$createView': createView {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$createView',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$orAlter': [AcceptIfTrue],
      '$orReplace': [AcceptIfTrue],
      '$temp': [AcceptIfTrue],
      '$recursive': [AcceptIfTrue],
      '$view': [StringIdentifier],
      '$ine': [AcceptIfTrue],
      '$ifNotExists': [AcceptIfTrue],
      '$securityBarrier': [AcceptIfTrue],
      '$checkOption': [checkOption],
      sqlPath: '.\\operators\\createView'
    },
    '$delete': $delete {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$delete',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$table': [StringIdentifier],
      '$from': [StringIdentifier],
      sqlPath: '.\\operators\\delete'
    },
    '$except': except {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$except',
      __allowedTypes__: [Object],
      '$distinct': [distinct],
      '$all': [all],
      sqlPath: '.\\operators\\except'
    },
    '$insert': insert {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$insert',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$table': [StringIdentifier],
      '$columns': [columns],
      '$values': [values],
      '$records': [records],
      '$documents': [documents],
      '$onDuplicateKeyUpdate': [onDuplicateKeyUpdate],
      '$onConflict': [onConflict],
      sqlPath: '.\\operators\\insert'
    },
    '$intersect': intersect {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$intersect',
      __allowedTypes__: [Object],
      '$distinct': [distinct],
      '$all': [all],
      sqlPath: '.\\operators\\intersect'
    },
    '$select': select {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$select',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$distinct': [AcceptIfTrue],
      '$calcFoundRows': [AcceptIfTrue],
      '$withRollup': [AcceptIfTrue],
      '$into': [into],
      '$join': [join],
      '$columns': [columns],
      '$groupBy': [groupBy],
      '$having': [having],
      sqlPath: '.\\operators\\select'
    },
    '$union': union {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$union',
      __allowedTypes__: [Object],
      '$distinct': [distinct],
      '$all': [all],
      sqlPath: '.\\operators\\union'
    },
    '$update': update {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$update',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$table': [StringIdentifier],
      '$set': [set],
      sqlPath: '.\\operators\\update'
    },
    '$with': $with {
      __is__: 'operator',
      __builderInstance__: [Circular *1],
      __name__: '$with',
      callee: [Function (anonymous)],
      __allowedTypes__: [Object],
      '$recursive': [AcceptIfTrue],
      '$cte': [cte],
      '$query': [query],
      sqlPath: '.\\operators\\with'
    }
  },
  _modules: {},
  _keywords: {
    DISTINCT: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
    VARCHAR: [ [Object] ],
    CHAR: [ [Object] ],
    TEXT: [ [Object] ],
    MEDIUMTEXT: [ [Object] ],
    LONGTEXT: [ [Object] ],
    NUMERIC: [ [Object] ],
    DECIMAL: [ [Object] ],
    INTEGER: [ [Object] ],
    INT: [ [Object] ],
    SMALLINT: [ [Object] ],
    TINYINT: [ [Object] ],
    BIGINT: [ [Object] ],
    BIT: [ [Object] ],
    BOOLEAN: [ [Object] ],
    SINGLE: [ [Object] ],
    DOUBLE: [ [Object] ],
    REAL: [ [Object] ],
    DATE: [ [Object] ],
    TIME: [ [Object] ],
    DATETIME: [ [Object] ],
    TIMESTAMP: [ [Object] ],
    TIMESTAMPZ: [ [Object] ],
    JSON: [ [Object] ],
    JSONB: [ [Object] ],
    NO_ACTION: [ [Object], [Object] ],
    SET_DEFAULT: [ [Object], [Object] ],
    SET_NULL: [ [Object], [Object] ],
    RESTRICT: [ [Object], [Object] ],
    CASCADE: [ [Object], [Object] ],
    MATCH_FULL: [ [Object] ],
    MATCH_PARTIAL: [ [Object] ],
    MATCH_SIMPLE: [ [Object] ],
    LATERAL: [ [Object], [Object], [Object], [Object], [Object] ],
    BTREE: [ [Object] ],
    HASH: [ [Object] ],
    CASCADED: [ [Object] ],
    LOCAL: [ [Object] ],
    DEFAULT: [ [Object], [Object] ]
  },
  _helperChain: [],
  _values: [],
  _supportedLanguages: [ 'PostgreSQL', 'MySQL', 'MariaDB', 'Oracle', 'SQLServer', 'SQLite' ],
  isPostgreSQL: [Function (anonymous)],
  isMySQL: [Function (anonymous)],
  isMariaDB: [Function (anonymous)],
  isOracle: [Function (anonymous)],
  isSQLServer: [Function (anonymous)],
  isSQLite: [Function (anonymous)],
  _quoteCharLeft: '`',
  _quoteCharRight: '`',
  placeholder: [Function (anonymous)],
  currentModulePath: '..\\sql\\operators\\with',
  DISTINCT: Symbol($SQL-DISTINCT),
  aggregationHelper: [Function (anonymous)],
  avg: [Function (anonymous)],
  count: [Function (anonymous)],
  max: [Function (anonymous)],
  min: [Function (anonymous)],
  sum: [Function (anonymous)],
  add: [Function (anonymous)],
  mul: [Function (anonymous)],
  between: [Function (anonymous)],
  contains: [Function (anonymous)],
  endsWith: [Function (anonymous)],
  eq: [Function (anonymous)],
  gt: [Function (anonymous)],
  gte: [Function (anonymous)],
  in: [Function (anonymous)],
  like: [Function (anonymous)],
  lt: [Function (anonymous)],
  lte: [Function (anonymous)],
  ne: [Function (anonymous)],
  nin: [Function (anonymous)],
  startsWith: [Function (anonymous)],
  VARCHAR: Symbol($SQL-VARCHAR),
  CHAR: Symbol($SQL-CHAR),
  TEXT: Symbol($SQL-TEXT),
  MEDIUMTEXT: Symbol($SQL-MEDIUMTEXT),
  LONGTEXT: Symbol($SQL-LONGTEXT),
  NUMERIC: Symbol($SQL-NUMERIC),
  DECIMAL: Symbol($SQL-DECIMAL),
  INTEGER: Symbol($SQL-INTEGER),
  INT: Symbol($SQL-INT),
  SMALLINT: Symbol($SQL-SMALLINT),
  TINYINT: Symbol($SQL-TINYINT),
  BIGINT: Symbol($SQL-BIGINT),
  BIT: Symbol($SQL-BIT),
  BOOLEAN: Symbol($SQL-BOOLEAN),
  SINGLE: Symbol($SQL-SINGLE),
  DOUBLE: Symbol($SQL-DOUBLE),
  REAL: Symbol($SQL-REAL),
  DATE: Symbol($SQL-DATE),
  TIME: Symbol($SQL-TIME),
  DATETIME: Symbol($SQL-DATETIME),
  TIMESTAMP: Symbol($SQL-TIMESTAMP),
  TIMESTAMPZ: Symbol($SQL-TIMESTAMPZ),
  JSON: Symbol($SQL-JSON),
  JSONB: Symbol($SQL-JSONB),
  column: [Function (anonymous)],
  check: [Function (anonymous)],
  constraint: [Function (anonymous)],
  foreignKey: [Function (anonymous)],
  primary: [Function (anonymous)],
  NO_ACTION: Symbol($SQL-NO_ACTION),
  SET_DEFAULT: Symbol($SQL-SET_DEFAULT),
  SET_NULL: Symbol($SQL-SET_NULL),
  RESTRICT: Symbol($SQL-RESTRICT),
  CASCADE: Symbol($SQL-CASCADE),
  MATCH_FULL: Symbol($SQL-MATCH_FULL),
  MATCH_PARTIAL: Symbol($SQL-MATCH_PARTIAL),
  MATCH_SIMPLE: Symbol($SQL-MATCH_SIMPLE),
  references: [Function (anonymous)],
  unique: [Function (anonymous)],
  cmp: [Function (anonymous)],
  coalesce: [Function (anonymous)],
  toTimestamp: [Function (anonymous)],
  '$json': [Function (anonymous)],
  '$jsonAgg': [Function (anonymous)],
  jsonAgg: [Function (anonymous)],
  '$jsonbAgg': [Function (anonymous)],
  jsonbAgg: [Function (anonymous)],
  '$jsonbBuildObject': [Function (anonymous)],
  '$jsonbEach': [Function (anonymous)],
  jsonbEach: [Function (anonymous)],
  '$jsonbObjectAgg': [Function (anonymous)],
  '$jsonbSet': [Function (anonymous)],
  jsonbSet: [Function (anonymous)],
  '$jsonBuildObject': [Function (anonymous)],
  '$jsonEach': [Function (anonymous)],
  jsonEach: [Function (anonymous)],
  '$jsonObjectAgg': [Function (anonymous)],
  '$rowToJson': [Function (anonymous)],
  rowToJson: [Function (anonymous)],
  concat: [Function (anonymous)],
  left: [Function (anonymous)],
  currentDatabase: [Function (anonymous)],
  currentSchema: [Function (anonymous)],
  currentUser: [Function (anonymous)],
  not: [Function (anonymous)],
  i: [Function (anonymous)],
  excluded: [Function (anonymous)],
  LATERAL: Symbol($SQL-LATERAL),
  crossJoin: [Function (anonymous)],
  fullOuterJoin: [Function (anonymous)],
  innerJoin: [Function (anonymous)],
  leftJoin: [Function (anonymous)],
  rightJoin: [Function (anonymous)],
  tableFunction: [Function (anonymous)],
  BTREE: Symbol($SQL-BTREE),
  HASH: Symbol($SQL-HASH),
  '$createIndex': [Function (anonymous)],
  createIndex: [Function (anonymous)],
  '$createTable': [Function (anonymous)],
  createTable: [Function (anonymous)],
  CASCADED: Symbol($SQL-CASCADED),
  LOCAL: Symbol($SQL-LOCAL),
  '$createView': [Function (anonymous)],
  createView: [Function (anonymous)],
  '$delete': [Function (anonymous)],
  delete: [Function (anonymous)],
  '$except': [Function (anonymous)],
  DEFAULT: Symbol($SQL-DEFAULT),
  '$insert': [Function (anonymous)],
  insert: [Function (anonymous)],
  '$intersect': [Function (anonymous)],
  '$select': [Function (anonymous)],
  select: [Function (anonymous)],
  '$union': [Function (anonymous)],
  '$update': [Function (anonymous)],
  update: [Function (anonymous)],
  '$with': [Function (anonymous)],
  with: [Function (anonymous)]
}